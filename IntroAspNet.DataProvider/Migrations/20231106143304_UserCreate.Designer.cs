// <auto-generated />
using System;
using IntroAspNet.DataProvider.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntroAspNet.DataProvider.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231106143304_UserCreate")]
    partial class UserCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f73b57e4-c2b5-4a85-8edb-f12be6d2e740"),
                            ConcurrencyStamp = "8f0b5776-78e5-48ec-bd79-b2e9e90c4586",
                            Name = "superadmin",
                            NormalizedName = "Super Admin"
                        },
                        new
                        {
                            Id = new Guid("985da856-3ea2-4780-a7e4-70ddd53b1c3d"),
                            ConcurrencyStamp = "b05fe868-533e-41bd-81f9-2c73fc9bbfa5",
                            Name = "admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("d54c4496-db72-4c3b-8663-a54c6ba49c5f"),
                            ConcurrencyStamp = "77de789c-5577-419d-8a95-38afba9adf57",
                            Name = "user",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5175a01d-0798-4e23-91da-3d375c565188"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "559dd2fd-4b98-4f44-a74b-13ab0467aaf2",
                            Email = "samiayaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Sami",
                            NormalizedEmail = "Sami Ayaz @ Gmail",
                            NormalizedUserName = "Sami Ayaz",
                            PasswordHash = "AQAAAAEAACcQAAAAEKO7mH5NehyItmu1jcQ/talPcUuxI0T+XIcSPc50HyN1K1ekfy0oa4dJtQb5nn1zQA==",
                            PhoneNumber = "5539592102",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "69094bcd-d876-4a52-b378-a372579f648d",
                            Surname = "AYAZ",
                            TwoFactorEnabled = false,
                            UserName = "samiayaz"
                        },
                        new
                        {
                            Id = new Guid("643ec9dd-3c9e-4778-bbc6-7ae19b3c6896"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d73b98f7-92b5-4a6b-9068-d16031ff198b",
                            Email = "sefaayaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Sefa",
                            NormalizedEmail = "Sefa Ayaz @ Gmail",
                            NormalizedUserName = "Sefa Ayaz",
                            PasswordHash = "AQAAAAEAACcQAAAAEBPa7/4ZZ5qRfbVqPHG77KllyYGARj6isJzi8mZzp6rxiVKQsnFvfMy9DdBWdss2IQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c856fb83-898e-43aa-9ef0-a3764de227e2",
                            Surname = "AYAZ",
                            TwoFactorEnabled = false,
                            UserName = "sefaayaz"
                        },
                        new
                        {
                            Id = new Guid("c36f5ad6-3914-4c98-aebb-6abede07c656"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cfa52db-4030-4e7c-bd6d-2caf7e46d075",
                            Email = "numanayaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Numan",
                            NormalizedEmail = "Numan Ayaz @ Gmail",
                            NormalizedUserName = "Numan Ayaz",
                            PasswordHash = "AQAAAAEAACcQAAAAEMYwp8uztzger60hDGGfiTQGaLXpVGKTGcnsvfzkvh8kl1rtUu/WVba+ZHMLWa62NQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a4f73db9-d5d9-4313-bb70-b28fcd7ff2c3",
                            Surname = "AYAZ",
                            TwoFactorEnabled = false,
                            UserName = "numanayaz"
                        });
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5175a01d-0798-4e23-91da-3d375c565188"),
                            RoleId = new Guid("f73b57e4-c2b5-4a85-8edb-f12be6d2e740")
                        },
                        new
                        {
                            UserId = new Guid("643ec9dd-3c9e-4778-bbc6-7ae19b3c6896"),
                            RoleId = new Guid("985da856-3ea2-4780-a7e4-70ddd53b1c3d")
                        },
                        new
                        {
                            UserId = new Guid("c36f5ad6-3914-4c98-aebb-6abede07c656"),
                            RoleId = new Guid("d54c4496-db72-4c3b-8663-a54c6ba49c5f")
                        });
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f409c5b-8ae7-46c2-b956-1778d35c3403"),
                            CategoryId = new Guid("bcfffae0-0887-418a-9ec6-88d103b61dfe"),
                            Content = "Article 1 Content",
                            CreatedAt = new DateTime(2023, 11, 6, 17, 33, 4, 88, DateTimeKind.Local).AddTicks(1864),
                            CreatedBy = "sa",
                            ImageId = new Guid("88fd2790-9df1-49ec-832e-af8ca7ca4349"),
                            IsDeleted = false,
                            Title = "Article 1",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = new Guid("4a88ec77-0b62-49a5-9aec-ae9038bd41bf"),
                            CategoryId = new Guid("5040350e-2655-4b91-9a39-233ecf87e0c4"),
                            Content = "Article 2 Content",
                            CreatedAt = new DateTime(2023, 11, 6, 17, 33, 4, 88, DateTimeKind.Local).AddTicks(1888),
                            CreatedBy = "sa",
                            ImageId = new Guid("4a765bfa-780c-4c8f-ab94-22f66a2555aa"),
                            IsDeleted = false,
                            Title = "Article 2",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcfffae0-0887-418a-9ec6-88d103b61dfe"),
                            CreatedAt = new DateTime(2023, 11, 6, 17, 33, 4, 88, DateTimeKind.Local).AddTicks(2441),
                            CreatedBy = "sa",
                            IsDeleted = false,
                            Name = "Category 1"
                        },
                        new
                        {
                            Id = new Guid("5040350e-2655-4b91-9a39-233ecf87e0c4"),
                            CreatedAt = new DateTime(2023, 11, 6, 17, 33, 4, 88, DateTimeKind.Local).AddTicks(2445),
                            CreatedBy = "sa",
                            IsDeleted = false,
                            Name = "Category 2"
                        });
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88fd2790-9df1-49ec-832e-af8ca7ca4349"),
                            CreatedAt = new DateTime(2023, 11, 6, 17, 33, 4, 88, DateTimeKind.Local).AddTicks(2937),
                            CreatedBy = "sa",
                            FileName = "Image 1",
                            FileType = "png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4a765bfa-780c-4c8f-ab94-22f66a2555aa"),
                            CreatedAt = new DateTime(2023, 11, 6, 17, 33, 4, 88, DateTimeKind.Local).AddTicks(2953),
                            CreatedBy = "sa",
                            FileName = "Image 2",
                            FileType = "jpeg",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppRoleClaim", b =>
                {
                    b.HasOne("IntroAspNet.Domain.Entities.Concretes.AppUser.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUserClaim", b =>
                {
                    b.HasOne("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUserLogin", b =>
                {
                    b.HasOne("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUserRole", b =>
                {
                    b.HasOne("IntroAspNet.Domain.Entities.Concretes.AppUser.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUserToken", b =>
                {
                    b.HasOne("IntroAspNet.Domain.Entities.Concretes.AppUser.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.Article", b =>
                {
                    b.HasOne("IntroAspNet.Domain.Entities.Concretes.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntroAspNet.Domain.Entities.Concretes.Image", "Image")
                        .WithOne("Article")
                        .HasForeignKey("IntroAspNet.Domain.Entities.Concretes.Article", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("IntroAspNet.Domain.Entities.Concretes.Image", b =>
                {
                    b.Navigation("Article")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
